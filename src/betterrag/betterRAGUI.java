/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package betterrag;


import com.RAG.json.*;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import com.google.gson.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;





/**
 *
 * @author stefan
 */
public class betterRAGUI extends javax.swing.JFrame {

    /**
     * Creates new form betterRAGUI
     */
    public betterRAGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        inputGrad = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        inputVorname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        inputNachname = new javax.swing.JTextField();
        inputHerkunft = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        inputSozHer = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        inputDekan = new javax.swing.JComboBox();
        inputRektor = new javax.swing.JComboBox();
        inputPromOrt = new javax.swing.JComboBox();
        inputImmOrt = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Abfragen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        inputGrad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "keine", "Artist", "Jurist", "Theologe", "Mediziner" }));

        jLabel1.setText("Graduierung");

        inputVorname.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));

        jLabel2.setText("Vorname");

        jLabel3.setText("Nachname");

        inputNachname.setText("hin*");
        inputNachname.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));
        inputNachname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNachnameActionPerformed(evt);
            }
        });

        inputHerkunft.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));

        jLabel4.setText("Herkunftsort");

        jLabel5.setText("Immatrikulationsort");

        jLabel6.setText("soziale Herkunft");

        inputSozHer.setText("Adel");
        inputSozHer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSozHerActionPerformed(evt);
            }
        });

        jLabel7.setText("Promotionsort");

        jLabel8.setText("Rektor der Universität");

        jLabel9.setText("Dekan der Universität");

        inputDekan.setEditable(true);
        inputDekan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        inputDekan.setSelectedIndex(-1);

        inputRektor.setEditable(true);
        inputRektor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Greifswald", "Rostock", "Köln", "Wien" }));
        inputRektor.setSelectedIndex(-1);

        inputPromOrt.setEditable(true);
        inputPromOrt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        inputPromOrt.setSelectedIndex(-1);

        inputImmOrt.setEditable(true);
        inputImmOrt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Greifswald", "Köln", "Rostock", "Paris", "Wien" }));
        inputImmOrt.setSelectedIndex(-1);
        inputImmOrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputImmOrtActionPerformed(evt);
            }
        });

        outputText.setColumns(20);
        outputText.setRows(5);
        jScrollPane1.setViewportView(outputText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputVorname, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputNachname, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputHerkunft, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(inputSozHer))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5)
                                    .addComponent(inputPromOrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputImmOrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(inputDekan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(inputRektor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(inputGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputNachname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputHerkunft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(inputVorname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputSozHer)))
                            .addComponent(jLabel7)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputRektor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputImmOrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputDekan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputPromOrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /**
         * start=0&limit=20&eingrenzung=1&datum1=1250&datum2=1550&optionen%5B%5D=Nachname&optionen%5B%5D=Vorname&optionen%5B%5D=Herkunftsort&optionen%5B%5D=Soziale%20Herkunft&optionen%5B%5D=Ort%20der%20Immatrikulation&optionen%5B%5D=Ort%20der%20Promotion&argumente%5B%5D=nachname&argumente%5B%5D=vorname&argumente%5B%5D=herkunft&argumente%5B%5D=sozher&argumente%5B%5D=immort&argumente%5B%5D=promort
         */
        
        //targetURL = baseURL + "&datum1=1250&datum2=1550&optionen%5B%5D=Ort%20der%20Immatrikulation&optionen%5B%5D=Promotionsgrad&argumente%5B%5D=Rostock&argumente%5B%5D=med";
        
        
        
        String argumente = inputAuswerten();
        String ragErgebnis =  ragAbfragen(argumente);
        
        Gson gson = new Gson();
        JsonObj jsonErgebnis = gson.fromJson(ragErgebnis, JsonObj.class);
        
        List<AaData> aaDataListe = jsonErgebnis.getAaData();
        for (AaData aaDataElem : aaDataListe){
            String ragHtml = idAbfragen(aaDataElem.getMain_id());
            Document doc = Jsoup.parse(ragHtml);
            String normName = doc.getElementsByTag("h1").first().text();
            String varName = doc.getElementsByTag("h3").first().text();
            Elements tabellen = doc.getElementsByClass("tableBiogram");
            String zitat = doc.select("p").last().text();
            
            
            
                       
            File file = new File("/home/stefan/RAG/"+aaDataElem.getMain_id().toString()+".txt");
            if (! file.exists()){
                try {
                    PrintWriter out = new PrintWriter(file);
                    out.println(zitat);
                    out.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(betterRAGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(betterRAGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                


                
            }
        }
        

        outputText.setText(ragErgebnis + "\n");
        System.out.print(jsonErgebnis.getITotalDisplayRecords());
        
        /*
        for (int i=0;i<jsonErgebnis.getITotalDisplayRecords();i++){
            // für alle ergebnisse main_id auslesen, abfragen und in objekt speichern
            HtmlToPlainText formatter = new HtmlToPlainText();
            String plainText = formatter.getPlainText(Jsoup.parse(idAbfragen(objData.get(i).getMain_id())));
            outputText.append(plainText);
            outputText.append("\n");
            //System.out.print(objData.get(i).getPers_norm_name() + ", " + objData.get(i).getPers_first_name1());
            System.out.print("\n");
        }
        */
        
        
        Document doc = Jsoup.parse(idAbfragen(10907534));
        System.out.print(doc);
        /*
        Elements tables = doc.select("table");
        //for (Element table : tables) {
            Element table = tables.first();
            Elements trs = table.select("tr");
            String[][] trtd = new String[trs.size()][];
            
            for (int i = 0; i < trs.size(); i++) {
                Elements tds = trs.get(i).select("td");
                trtd[i] = new String[tds.size()];
                for (int j = 0; j < tds.size(); j++) {
                    trtd[i][j] = tds.get(j).text(); 
                }
        //}
        System.out.print(trtd[0][0]);
        }
        */
    
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void inputSozHerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSozHerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputSozHerActionPerformed

    private void inputImmOrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputImmOrtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputImmOrtActionPerformed

    private void inputNachnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNachnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNachnameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(betterRAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(betterRAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(betterRAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(betterRAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new betterRAGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox inputDekan;
    private javax.swing.JComboBox inputGrad;
    private javax.swing.JTextField inputHerkunft;
    private javax.swing.JComboBox inputImmOrt;
    private javax.swing.JTextField inputNachname;
    private javax.swing.JComboBox inputPromOrt;
    private javax.swing.JComboBox inputRektor;
    private javax.swing.JCheckBox inputSozHer;
    private javax.swing.JTextField inputVorname;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputText;
    // End of variables declaration//GEN-END:variables

    private String inputAuswerten() {
        String opt="&optionen%5B%5D=";
        String arg="&argumente%5B%5D=";
        String optionen = "";
        String argumente = "";
        if (!inputNachname.getText().isEmpty()){
            optionen += opt + "Nachname";
            argumente += arg + inputNachname.getText();
        }
        if (!inputVorname.getText().isEmpty()){
            optionen += opt + "Vorname";
            argumente += arg + inputVorname.getText();
        }
        if (!inputHerkunft.getText().isEmpty()){
            optionen += opt + "Herkunftsort";
            argumente += arg + inputHerkunft.getText();
        }
        if (inputSozHer.isSelected()){
            optionen += opt + "Soziale%20Herkunft";
            argumente += arg + "Adel";
        }
        if (inputImmOrt.getSelectedIndex() != -1){
            optionen += opt + "Ort%20der%20Immatrikulation";
            argumente += arg + inputImmOrt.getSelectedItem().toString();
        }
        if (inputPromOrt.getSelectedIndex() != -1){
            optionen += opt + "Ort%20der%20Promotion";
            argumente += arg + inputPromOrt.getSelectedItem().toString();
        }
        if (inputRektor.getSelectedIndex() != -1){
            optionen += opt + "Rektor%20an%20der%20Universit%C3%A4t%20in";
            argumente += arg + inputRektor.getSelectedItem().toString();
        }
        if (inputDekan.getSelectedIndex() != -1){
            optionen += opt + "Dekan%20an%20der%20Universit%C3%A4t%20in";
            argumente += arg + inputDekan.getSelectedItem().toString();
        }
        if (!inputGrad.getSelectedItem().toString().equals("keine")){
            optionen += opt + "Promotionsgrad";
            //TODO: CASE
            switch (inputGrad.getSelectedItem().toString()) {
                case "Artist": 
                    argumente += arg + "art";
                    break;
                case "Jurist": 
                    argumente += arg + "jur";
                    break;
                case "Theologe": 
                    argumente += arg + "theol";
                    break;
                case "Mediziner": 
                    argumente += arg + "med";
                    break;
            }
        }
            
        
            
        
        
        return optionen+argumente;
    }

    private String ragAbfragen(String argumente) {

            
        String baseURL = "http://www.rag-online.org/index.php?option=com_person&task=sucheAjax&view=json&layout=json";
        //TODO: startelement, abfragelimit, datum1/2 parametrisieren
        String targetURL = baseURL + "&start=0&limit=999&eingrenzung=1&datum1=1250&datum2=1550" + argumente;
        return ragVerbinden(targetURL);
    }
    
    private String ragVerbinden(String targetURL) {
    String contentOut = null;
    String urlParameters = null;
        try {
            urlParameters = "fName=" + URLEncoder.encode("???", "UTF-8") + "&lName=" + URLEncoder.encode("???", "UTF-8");
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(betterRAGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    URL url;
    HttpURLConnection connection = null;  
    try {
      //Create connection
      url = new URL(targetURL);
      connection = (HttpURLConnection)url.openConnection();
      connection.setRequestMethod("POST");
      connection.setRequestProperty("Content-Type", 
           "application/x-www-form-urlencoded");

      connection.setRequestProperty("Content-Length", "" + 
               Integer.toString(urlParameters.getBytes().length));
      connection.setRequestProperty("Content-Language", "en-US");  

      connection.setUseCaches (false);
      connection.setDoInput(true);
      connection.setDoOutput(true);

        try ( //Send request
                DataOutputStream wr = new DataOutputStream (
                        connection.getOutputStream ())) {
            wr.writeBytes (urlParameters);
            wr.flush ();
        }

      //Get Response    
      InputStream is = connection.getInputStream();
      StringBuilder response;
        try (BufferedReader rd = new BufferedReader(new InputStreamReader(is))) {
            String line;
            response = new StringBuilder();
            while((line = rd.readLine()) != null) {
                response.append(line);
                response.append('\r');
            } }
        contentOut = response.toString();
        
    } catch (Exception e) {
    } finally {

      if(connection != null) {
        connection.disconnect(); 
      }
    }
        return contentOut;

    }

    private String idAbfragen(Number main_id) {
        String baseURL = "http://www.rag-online.org/index.php?option=com_person&format=default&task=person&id=";
        
        String targetURL = baseURL + main_id;
        return ragVerbinden(targetURL);
    }
}
